ARG BASE_CONTAINER=frolvlad/alpine-glibc:alpine-3.19_glibc-2.34

FROM ${BASE_CONTAINER} as foundation

ARG NB_USER="jovyan"
ARG NB_UID="1000"

# Configure environment
ENV CONDA_DIR=/opt/conda \
    SHELL=/bin/bash \
    NB_USER="${NB_USER}" \
    NB_UID=${NB_UID} \
    NB_GID=100 \
    LC_ALL=C.UTF-8 \
    LANG=C.UTF-8 \
    LANGUAGE=C.UTF-8
ENV TZ="Hongkong" \
    PATH="${CONDA_DIR}/bin:${PATH}" \
    HOME="/home/${NB_USER}"

# Copy a script that we will use to correct permissions after running certain commands
COPY fix-permissions /usr/local/bin/fix-permissions

RUN apk add --no-cache shadow bash bash-completion linux-pam \
    # - bzip2 is necessary to extract the micromamba executable.
    bzip2 \
    ca-certificates \
    tzdata \
    sudo \
    git \
    unzip \
    vim \
    openssh-client \
    less \
    xclip \
    curl \
    # - tini is installed as a helpful container entrypoint that reaps zombie
    #   processes and such of the actual executable we want to start, see
    #   https://github.com/krallin/tini#why-tini for details.
    tini \
    wget && \
    # enable color prompt
    ln -sf /etc/profile.d/color_prompt.sh.disabled /etc/profile.d/color_prompt.sh && \
    # Create NB_USER with name jovyan user with UID=1000 and in the 'users' group
    # and make sure these dirs are writable by the `users` group.
    echo "auth requisite pam_deny.so" >> /etc/pam.d/su && \
    sed -i.bak -e 's/^%admin/#%admin/' /etc/sudoers && \
    sed -i.bak -e 's/^%sudo/#%sudo/' /etc/sudoers && \
    adduser -D -h /home/${NB_USER} -s /bin/bash -G users -u "${NB_UID}" "${NB_USER}" && \
    chmod g+w /etc/passwd && \
    mkdir -p "${CONDA_DIR}" && \
    chown "${NB_USER}:${NB_GID}" "${CONDA_DIR}" && \
    chmod a+rx /usr/local/bin/fix-permissions && \
    fix-permissions "${HOME}" && \
    fix-permissions "${CONDA_DIR}"

# Fix: https://github.com/hadolint/hadolint/wiki/DL4006
# Fix: https://github.com/koalaman/shellcheck/wiki/SC3014
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# Configure container startup
ENTRYPOINT ["tini", "-g", "--"]

# ---------------------------------------------------------------------------
FROM foundation as base

# Pin python version here, or set it to "default"
ARG PYTHON_VERSION=3.11


USER ${NB_UID}

# Download and install Micromamba, and initialize Conda prefix.
#   <https://github.com/mamba-org/mamba#micromamba>
#   Similar projects using Micromamba:
#     - Micromamba-Docker: <https://github.com/mamba-org/micromamba-docker>
#     - repo2docker: <https://github.com/jupyterhub/repo2docker>
# Install Python, Mamba and jupyter_core
# Cleanup temporary files and remove Micromamba
# Correct permissions
# Do all this in a single RUN command to avoid duplicating all of the
# files across image layers when the permissions change
COPY --chown="${NB_UID}:${NB_GID}" initial-condarc "${CONDA_DIR}/.condarc"
WORKDIR /tmp
RUN set -x && \
    arch=$(uname -m) && \
    if [ "${arch}" = "x86_64" ]; then \
        # Should be simpler, see <https://github.com/mamba-org/mamba/issues/1437>
        arch="64"; \
    fi &&  \
    wget --progress=dot:giga -O /tmp/micromamba.tar.bz2 \
        "https://github.com/mamba-org/micromamba-releases/releases/download/1.5.6-0/micromamba-linux-${arch}.tar.bz2" && \
    tar -xvjf /tmp/micromamba.tar.bz2 --strip-components=1 bin/micromamba && \
    rm /tmp/micromamba.tar.bz2 && \
    PYTHON_SPECIFIER="python=${PYTHON_VERSION}" && \
    if [[ "${PYTHON_VERSION}" == "default" ]]; then PYTHON_SPECIFIER="python"; fi && \
    # Install the packages
    ./micromamba install \
        --root-prefix="${CONDA_DIR}" \
        --prefix="${CONDA_DIR}" \
        --yes \
        "${PYTHON_SPECIFIER}" \
        'mamba' \
        'jupyter_core' && \
    rm micromamba && \
    # Pin major.minor version of python
    mamba list python | grep '^python ' | tr -s ' ' | cut -d ' ' -f 1,2 >> "${CONDA_DIR}/conda-meta/pinned" && \
    mamba clean --all -f -y && \
    fix-permissions "${CONDA_DIR}" && \
    fix-permissions "/home/${NB_USER}"

# Install Jupyter Notebook, Lab, and Hub
# Generate a notebook server config
# Cleanup temporary files
# Correct permissions
# Do all this in a single RUN command to avoid duplicating all of the
# files across image layers when the permissions change
RUN mamba install --yes \
    'nodejs<19' \
    'notebook==7.0.6' \
    'jupyterlab==4.0.9' \
    'jupyterhub==4.0.2' \
    && \
    jupyter notebook --generate-config && \
    mamba clean --all -f -y && \
    npm cache clean --force && \
    jupyter lab clean && \
    rm -rf "/home/${NB_USER}/.cache/yarn" && \
    fix-permissions "${CONDA_DIR}" && \
    fix-permissions "/home/${NB_USER}"

# Interface
RUN mamba install --quiet --yes \
    'code-server=4.16.*' \
    'websockify=0.11.*' \
    'jupyter-vscode-proxy=0.5' \
    'jupytext=1.16.*' \
    'nbgitpuller=1.2.*' \
    'black=23.12.*' \
    'jupyterlab_code_formatter=2.2.*' \
    'python-lsp-server=1.9.*' \
    && \
    pip install --quiet --no-cache-dir \
    'jupyterlab-git==0.50.*' \    
    'jupyterlab_filesystem_access==0.5.*' \
    'jupyter-www-proxy' \
    && \
    mamba clean --all -f -y && \
    fix-permissions "${CONDA_DIR}"

# Code extensions
RUN for ext in \
        ms-python.python \
        ms-toolsai.jupyter \
        ms-toolsai.vscode-jupyter-powertoys \
        streetsidesoftware.code-spell-checker \
        sugatoray.vscode-git-extension-pack \
        Kelvin.vscode-sshfs \
        hediet.vscode-drawio \
        genieai.chatgpt-vscode \
        ; do \
        code-server --install-extension "$ext"; \
    done

# For cs1302
RUN mamba install --quiet --yes \
    'manim=0.18.*' \
    'manimpango=0.5.*' \
    'pandas=2.1.*' \
    'matplotlib-base=3.8.*' \
    'ipympl=0.9.*' \
    'sympy=1.*' \
    'jupyterlite=0.2.*' \
    && \
    pip install --quiet --no-cache-dir \
    'divewidgets' \
    'jupyterlab-myst==2.1.*' \
    && \
    mamba clean --all -f -y && \
    fix-permissions "${CONDA_DIR}"

# Nbgrader
RUN pip install --quiet --no-cache-dir \
    'nbgrader==0.9.*' && \
    # git+https://github.com/dive4dec/nbgrader.git && \
    fix-permissions "${CONDA_DIR}"

RUN pip install --quiet --no-cache-dir \
    'jupyterlab_theme_solarized_dark' \
    'jupyterlab-night' \
    'jupyterlab_theme_solarized_dark' \
    'theme-darcula' && \
    fix-permissions "${CONDA_DIR}"

RUN mkdir -p ${CONDA_DIR}/srv/exchange && chmod ugo+rw $_

RUN jupyter server extension disable --sys-prefix nbgrader.server_extensions.formgrader

COPY --chown=${NB_USER}:${NB_GID} nbgrader_config.py ${CONDA_DIR}/etc/jupyter/nbgrader_config.py

# Copy local files as late as possible to avoid cache busting
COPY start.sh start-notebook.sh start-singleuser.sh grader_setup /usr/local/bin/
# Currently need to have both jupyter_notebook_config and jupyter_server_config to support classic and lab
COPY jupyter_server_config.py docker_healthcheck.py /etc/jupyter/

# RISE
RUN pip install --quiet --no-cache-dir \
    # not compatible with jupyterlab-myst
    # 'jupyterlab_rise==0.42.*' \
    'jupyterlab-deck==0.2.0' && \
    fix-permissions "${CONDA_DIR}"

# Disable news and update
# See https://jupyterlab.readthedocs.io/en/stable/user/announcements.html
RUN jupyter labextension disable "@jupyterlab/apputils-extension:announcements"

# MyST Markdown CLI
RUN npm install -g mystmd

# # Collaboration
# RUN mamba install --quiet --yes \
#     'jupyter-collaboration=1.1.*' \
#     && \
#     mamba clean --all -f -y && \
#     fix-permissions "${CONDA_DIR}"

# ----------------------------------------------------------
# Cleanup

USER ${NB_UID}

RUN npm cache clean --force && \
    jupyter lab clean && \
    mamba clean --all -f -y && \
    fix-permissions "${CONDA_DIR}" && \
    fix-permissions "/home/${NB_USER}"

# ----------------------------------------------------------

FROM foundation as prod

COPY --from=base /opt/conda /opt/conda
COPY --from=base /usr/local/bin/ /usr/local/bin/
COPY --from=base /etc/jupyter /etc/jupyter

RUN conda init --system bash

ENV NBGRADER_UID=2000 \
    NBGRADER_USER=nbgrader

# Create NBGRADER_USER with name nbgrader, UID=2000 and in the 'users' group
# This user should be the owner of the course root and exchange folder for nbgrader.
RUN adduser -D --no-create-home -s /bin/bash -G users -u "${NBGRADER_UID}" "${NBGRADER_USER}"


USER ${NB_UID}
WORKDIR ${HOME}

# Configure container startup
CMD ["start-notebook.sh"]

# HEALTHCHECK documentation: https://docs.docker.com/engine/reference/builder/#healthcheck
# This healtcheck works well for `lab`, `notebook`, `nbclassic`, `server` and `retro` jupyter commands
# https://github.com/jupyter/docker-stacks/issues/915#issuecomment-1068528799
HEALTHCHECK --interval=5s --timeout=3s --start-period=5s --retries=3 \
    CMD /etc/jupyter/docker_healthcheck.py || exit 1

ENV JUPYTER_PORT=8888
EXPOSE $JUPYTER_PORT


# ----------------------------------------------------------

FROM prod as default

USER ${NB_USER}
