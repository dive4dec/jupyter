ARG ROOT_CONTAINER=ubuntu:24.04

FROM $ROOT_CONTAINER AS prod

# Avoid prompt for user input for installation of dependencies
ENV DEBIAN_FRONTEND=noninteractive

ARG NB_USER="jovyan"
ARG NB_UID="1000"
ARG NB_GID="100"
ARG CONDA_DIR=/opt/conda
ENV CONDA_DIR=${CONDA_DIR} \
    SHELL=/bin/bash \
    NB_USER="${NB_USER}" \
    NB_UID=${NB_UID} \
    NB_GID=${NB_GID} \
    LC_ALL=C.UTF-8 \
    LANG=C.UTF-8 \
    LANGUAGE=C.UTF-8 \
    TZ=Asia/Hong_Kong \
    HOME="/home/${NB_USER}" \
    PATH="${CONDA_DIR}/bin:${PATH}"

# Fix: https://github.com/hadolint/hadolint/wiki/DL4006
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# Use system bashrc since /home/jovyan is temporary
RUN mv /etc/skel/.bashrc /etc/bash.bashrc && \
    # Enable prompt color in the skeleton .bashrc before creating the default NB_USER
    # hadolint ignore=SC2016
    sed -i 's/^#force_color_prompt=yes/force_color_prompt=yes/' /etc/bash.bashrc

# Fix the UID conflict with user ubuntu
# See https://bugs.launchpad.net/cloud-images/+bug/2005129
RUN touch /var/mail/ubuntu && chown ubuntu /var/mail/ubuntu && userdel -r ubuntu && \
    useradd -l -m -s /bin/bash -N -u "${NB_UID}" "${NB_USER}"

RUN apt-get update --yes && \
    # Patch newly discovered vulnerabilities in apt-get packages
    apt-get upgrade --yes && \
    apt-get install --yes --no-install-recommends \
    # To extract micromamba
    bzip2 \
    ca-certificates \
    locales \
    sudo \
    # used as an entrypoint that reaps zombie processes.
    # See https://github.com/krallin/tini#why-tini
    tini \
    wget \
    less \
    curl \
    # Common useful utilities
    git \
    tzdata \
    unzip \
    vim-tiny \
    && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && \
    echo "C.UTF-8 UTF-8" >> /etc/locale.gen && \
    locale-gen && \
    ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Install all OS dependencies
# RUN apt-get update --yes && \
#     apt-get install --yes --no-install-recommends \
#     fonts-liberation \
#     # To convert notebooks to html files
#     pandoc \
#     # A wrapper script that runs no more
#     # to support `RESTARTABLE` option
#     run-one \
#     # Common useful utilities
#     git \
#     nano-tiny \
#     tzdata \
#     unzip \
#     vim-tiny \
#     # git-over-ssh
#     openssh-client \
#     # nbconvert dependencies
#     # See https://nbconvert.readthedocs.io/en/latest/install.html#installing-tex
#     texlive-xetex \
#     texlive-fonts-recommended \
#     texlive-plain-generic \
#     dvisvgm \
#     # Enable clipboard on Linux host systems
#     xclip && \
#     apt-get clean && rm -rf /var/lib/apt/lists/*
# A script to correct permissions after running certain commands
COPY fix-permissions /usr/local/bin/fix-permissions
RUN chmod a+rx /usr/local/bin/fix-permissions

# Make sure these dirs are writable by the `users` group.
RUN echo "auth requisite pam_deny.so" >> /etc/pam.d/su && \
    sed -i.bak -e 's/^%admin/#%admin/' /etc/sudoers && \
    sed -i.bak -e 's/^%sudo/#%sudo/' /etc/sudoers && \
    mkdir -p "${CONDA_DIR}" && \
    chown "${NB_USER}:${NB_GID}" "${CONDA_DIR}" && \
    chmod g+w /etc/passwd && \
    fix-permissions "${HOME}" && \
    fix-permissions "${CONDA_DIR}"

USER ${NB_UID}

# Pin python version here, or leave it empty for the latest version
ARG PYTHON_VERSION=3.12

# Pin micromamba version here, or leave it empty for the latest version
ARG MICROMAMBA_VERSION=2.3.0-1

# Download and install Micromamba, and initialize Conda prefix.
#   <https://github.com/mamba-org/mamba#micromamba>
# Install Python, Mamba and jupyter_core
COPY --chown="${NB_UID}:${NB_GID}" initial-condarc "${CONDA_DIR}/.condarc"
WORKDIR /tmp
RUN set -x && \
    # Computing artifact location
    case "$(uname)" in \
      Linux) \
        PLATFORM="linux" ;; \
      Darwin) \
        PLATFORM="osx" ;; \
      *NT*) \
        PLATFORM="win" ;; \
    esac && \
    ARCH="$(uname -m)" && \
    case "$ARCH" in \
      aarch64|ppc64le|arm64) \
          ;; \
      *) \
        ARCH="64" ;; \
    esac && \
    case "$PLATFORM-$ARCH" in \
        linux-aarch64|linux-ppc64le|linux-64|osx-arm64|osx-64|win-64) \
            ;; \
        *) \
        echo "Failed to detect your OS" >&2 && \
        exit 1 ;; \
    esac && \
    if [ "${MICROMAMBA_VERSION:-}" = "" ]; then \
        RELEASE_URL="https://github.com/mamba-org/micromamba-releases/releases/latest/download/micromamba-${PLATFORM}-${ARCH}" ; \
    else \
        RELEASE_URL="https://github.com/mamba-org/micromamba-releases/releases/download/${MICROMAMBA_VERSION}/micromamba-${PLATFORM}-${ARCH}" ; \
    fi && \
    BIN_FOLDER="${CONDA_DIR}/bin" && \
    mkdir -p "${BIN_FOLDER}" && \
    curl "${RELEASE_URL}" -o "${BIN_FOLDER}/micromamba" -fsSL --compressed && \
    chmod +x "${BIN_FOLDER}/micromamba" && \
    ln -s ${BIN_FOLDER}/micromamba ${BIN_FOLDER}/mamba && \
    ln -s ${BIN_FOLDER}/micromamba ${BIN_FOLDER}/conda

# Set MAMBA_ROOT_PREFIX environment variable for the Docker build process and runtime
ENV MAMBA_ROOT_PREFIX=${CONDA_DIR}

USER root

# Add call to micromamba init script
RUN cat <<'EOF' >> /etc/bash.bashrc
eval "$(mamba shell hook --shell bash)"
alias conda="micromamba"
alias mamba="micromamba"
mamba activate
EOF

USER ${NB_USER}

RUN if [ "${PYTHON_VERSION:-}" = "" ]; then PYTHON_SPECIFIER="python"; else PYTHON_SPECIFIER="python=${PYTHON_VERSION}"; fi && \
        mamba install --yes \
        "${PYTHON_SPECIFIER}" \
        && \
        # Pin major.minor version of python
        mkdir -p "${CONDA_DIR}/conda-meta" && \
        mamba list python | sed 's/^[[:space:]]*//' | grep '^python ' | tr -s ' ' | cut -d ' ' -f 1,2 >> "${CONDA_DIR}/conda-meta/pinned" && \
        mamba clean --all -f -y && \
        fix-permissions "${CONDA_DIR}" && \
        fix-permissions "/home/${NB_USER}"

# Fix compatibility issues with AI tools
RUN echo "packaging<25" >> "${CONDA_DIR}/conda-meta/pinned"

ARG NODE_DISABLE_NODE_COMPILE_CACHE=1

# Install Jupyter Notebook, Lab, and Hub
RUN \
    mamba install --yes --quiet \
    # code-server requirement
    'nodejs==24.4.*' \
    'notebook==7.4.*' \
    'jupyterlab==4.4.*' \
    'jupyterhub==5.3.*' \
    && \
    # jupyter notebook --generate-config && \
    mamba clean --all -f -y && \
    npm cache clean --force && \
    jupyter lab clean && \
    fix-permissions "${CONDA_DIR}" && \
    fix-permissions "/home/${NB_USER}"
    


### code-server ###
RUN mamba install --yes --quiet \
    'zlib==1.3.*' && \
    mamba install --yes --quiet --no-deps \
    'code-server==4.103.1' \
    && \
    mamba clean --all -f -y && \
    npm cache clean --force && \
    jupyter lab clean && \
    fix-permissions "${CONDA_DIR}" && \
    fix-permissions "/home/${NB_USER}"

RUN \
    mamba install --yes --quiet \
    'clangxx==20.1.*' \
    'clang-tools==20.1.*' \
    'libcxx==20.1.*' \
    'libcxx-devel==20.1.*' \
    'lldb==20.1.*' \
    'lld==20.1.*' \
    'libcxxabi==20.1.*' \
    && \
    mamba clean --all -f -y && \
    npm cache clean --force && \
    jupyter lab clean && \
    fix-permissions "${CONDA_DIR}" && \
    fix-permissions "/home/${NB_USER}"

RUN \
    mamba install --yes --quiet \
    'git' \
    'emacs' \
    'vim' \
    'make' \
    'cmake' \
    'openssh' \
    'tini' \
    'xz' \
    'numpy<2' \
    'matplotlib-base=3.10.*' \
    'ipympl=0.9.*' \
    'jupytext=1.17.*' \
    'ipywidgets=8.1.*' \
    'jupyterlab-myst=2.4.*' \
    'ipykernel=6.29.*' \
    && \
    mamba clean --all -f -y && \
    npm cache clean --force && \
    jupyter lab clean && \
    fix-permissions "${CONDA_DIR}" && \
    fix-permissions "/home/${NB_USER}"

RUN mamba install --quiet --yes \
    'websockify=0.13.*' \
    'jupyter-vscode-proxy=0.6' \
    'jupytext=1.17.*' \
    'black=25.1.*' \
    'jupyterlab_code_formatter=3.0.*' \
    'jupyterlab-lsp=5.1.*' \
    'jupyter-resource-usage=1.1.*' \
    'nbgitpuller==1.2.*' \
    'jupyterlab-git==0.51.*' \
    && \
    pip install --quiet --no-cache-dir \
    # 'jupyterlab_filesystem_access==0.6.*' \
    'python-lsp-server[all]==1.12.*' \
    # 'clangd==20.1.*' \
    # 'clang-format==20.1.*' \
    'astyle==3.6.*' \
    'jupyter-www-proxy' \
    && \
    # See https://jupyterlab-lsp.readthedocs.io/en/latest/Language%20Servers.html#example-getting-all-the-node-js-based-language-servers
    npm install -g --save-dev  \
    bash-language-server \
    dockerfile-language-server-nodejs \
    pyright \
    sql-language-server \
    typescript-language-server \
    unified-language-server \
    vscode-css-languageserver-bin \
    vscode-html-languageserver-bin \
    vscode-json-languageserver-bin \
    yaml-language-server \
    && \
    npm cache clean --force && \
    mamba clean --all -f -y && \
    fix-permissions "${CONDA_DIR}"

# Documentations with MyST
RUN \
    npm install -g \
    mystmd@1.5.1 \
    && \
    npm cache clean --force



USER root

### Emscripten ###
# Install Emscripten for MLC Wasm
# See: 
#   https://emscripten.org/docs/getting_started/downloads.html
#   https://llm.mlc.ai/docs/install/emcc.html
RUN wget https://github.com/emscripten-core/emsdk/archive/refs/tags/4.0.10.tar.gz && \
    tar -xzf 4.0.10.tar.gz && \
    rm 4.0.10.tar.gz && \
    mv emsdk-4.0.10 /opt/emsdk && \
    cd /opt/emsdk && \
    chmod +x emsdk && \
    ./emsdk install latest && \
    ./emsdk activate latest && \
    fix-permissions /opt/emsdk

### cosmocc ###
# Install Cosmopolitan LibC
# See: https://github.com/jart/cosmopolitan
RUN mkdir -p /opt/cosmocc && \
    wget https://github.com/jart/cosmopolitan/releases/download/4.0.2/cosmocc-4.0.2.zip && \
    unzip cosmocc-4.0.2.zip -d /opt/cosmocc && \
    rm cosmocc-4.0.2.zip && \
    fix-permissions /opt/cosmocc


USER ${NB_UID}


# Copy local files as late as possible to avoid cache busting
COPY start.sh /usr/local/bin/
COPY start-notebook.sh start-singleuser.sh install-vscode-extension /usr/local/bin/
# Currently need to have both jupyter_notebook_config and jupyter_server_config to support classic and lab
COPY jupyter_server_config.py docker_healthcheck.py /etc/jupyter/

# Code extensions
RUN for ext in \
        llvm-vs-code-extensions.vscode-clangd \
        kylinideteam.cmake-intellisence \
        # vadimcn.vscode-lldb \
        ms-python.python \
        ms-python.pylint \
        ms-toolsai.jupyter \
        ms-toolsai.vscode-jupyter-powertoys \
        ms-python.black-formatter \
        # streetsidesoftware.code-spell-checker@4.1.0 \
        hediet.vscode-drawio \
        # eamodio.gitlens \
        donjayamanne.githistory \
        mhutchie.git-graph \
        waderyan.gitblame \
        codezombiech.gitignore \
        ziyasal.vscode-open-in-github \
        alefragnani.project-manager \
        ziyasal.vscode-open-in-github \
        mads-hartmann.bash-ide-vscode \
        ; do \
        code-server --extensions-dir /opt/conda/share/code-server/lib/vscode/extensions --install-extension "$ext"; \
    done

RUN for ext in \
    GitHub.copilot-chat@0.28.5 \
    GitHub.copilot@1.342.0 \
    Continue.continue@1.0.17 \
    ms-vsliveshare.vsliveshare@1.0.5857 \
    ; do \
    install-vscode-extension "$ext" --extensions-dir /opt/conda/share/code-server/lib/vscode/extensions; \
    done

RUN \
    mamba install --quiet --yes \
    'gh=2.74.*' \
    'jupyter-ai=2.31.*' \
    && \
    # pip install --quiet --no-cache-dir --pre \
    # 'jupyter-ai==3.0.0b0' \
    # && \
    pip install --quiet --no-cache-dir \
    'divewidgets' \
    # 'nbgrader==0.9.*' \
    'nbgrader@git+https://github.com/dive4dec/nbgrader.git@8e0b69a6da48856e6f180d27041b6e1c96602934' \
    # 'vllm' \
    'jdc' \
    # 'jupyterlab-tensorboard-pro' \
    && \
    mamba clean --all -f -y && \    
    fix-permissions "${CONDA_DIR}"



RUN \
    mamba install --quiet --yes \
    # Python
    # 'xeus-python' \
    # C, C++
    'xeus-cpp' \
    # 'xeus-cling=0.15.*' \
    'xtensor' \
    # 'xwidgets' \
    'root' \
    && \
    mamba clean --all -f -y && \    
    fix-permissions "${CONDA_DIR}"


# Configure container startup
# ENTRYPOINT ["tini", "-g", "--"]
ENTRYPOINT ["tini", "-g", "--", "micromamba", "run", "-n", "base"]

# Configure container startup
CMD ["start-notebook.sh"]

ENV JUPYTER_PORT=8888
EXPOSE $JUPYTER_PORT

# # Switch back to jovyan to avoid accidental container runs as root
USER ${NB_UID}

# nbgrader deploy
RUN mkdir -p ${CONDA_DIR}/srv/exchange && chmod ugo+rw $_

RUN jupyter server extension disable --sys-prefix nbgrader.server_extensions.formgrader && \
    jupyter labextension disable nbgrader:formgrader && \
    jupyter labextension disable nbgrader:course-list && \
    jupyter labextension disable nbgrader:create-assignment

ENV COURSE_ID="cs2310"

# Configuration files
# Conda
COPY --chown="${NB_UID}:${NB_GID}" initial-condarc "${CONDA_DIR}/.condarc"
# Nbgrader
COPY --chown=${NB_USER}:${NB_GID} nbgrader_config.py ${CONDA_DIR}/etc/jupyter/nbgrader_config.py
# Jupyter kernels
COPY --chown="${NB_UID}:${NB_GID}" kernels/ "${CONDA_DIR}/share/jupyter/kernels/"
# JupyterLab Code Formatting
COPY --chown="${NB_UID}:${NB_GID}" jupyterlab_code_formatter_settings.json "${CONDA_DIR}/share/jupyter/labextensions/jupyterlab_code_formatter/schemas/jupyterlab_code_formatter/settings.json"
# Jupyter LSP
COPY --chown="${NB_UID}:${NB_GID}" jupyterlab_code_formatter_settings.json "${CONDA_DIR}/share/jupyter/labextensions/@jupyter-lsp/jupyterlab-lsp/schemas/@jupyter-lsp/jupyterlab-lsp/diagnostics.json"
# IPython config
COPY --chown=${NB_USER}:${NB_GID} ipython_config.py "${CONDA_DIR}/etc/ipython/ipython_config.py"
# Jupyter Server
COPY --chown="${NB_UID}:${NB_GID}" jupyter_server_config.d/ "${CONDA_DIR}/etc/jupyter/jupyter_server_config.d/"

# Disable news and update
# See https://jupyterlab.readthedocs.io/en/stable/user/announcements.html
RUN jupyter labextension disable "@jupyterlab/apputils-extension:announcements"

USER ${NB_UID}

# Add Emscripten to PATH
ENV PATH="/opt/emsdk:/opt/emsdk/upstream/emscripten:${PATH}:/opt/cosmocc/bin"
RUN chmod a+w /opt/emsdk/upstream/emscripten/cache

WORKDIR "${HOME}"

ENV LIBRARY_PATH="${CONDA_DIR}/lib" \
    LD_LIBRARY_PATH="${CONDA_DIR}/lib"